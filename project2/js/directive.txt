.directive('testD',function($http){
	return function(scope,ele,attrs){
		submitState = false;
		var ue = UE.getEditor('editor', {
		toolbars: [
			[
			  'undo', //撤销
			  ]
		],
		autoHeightEnabled: false,
		autoFloatEnabled: true
		});
		ue.addListener('selectionchange',function(){
			var arr = [];
			arr.push(ue.getContentTxt());
			var text = arr.join('\n');
			while(text.indexOf(' ')!=-1){
				text = text.replace(' ','');
			}
			scope.vm.lisText = text;
			scope.$apply();
			var arrLen = text.length;
			if(arrLen == 0){
				$('#lisWish').css('display','inline-block');
				scope.vm.textState = false;
			}else{
				$('#lisWish').css('display','none');
				scope.vm.textState = true;
			}
		})
		if(addState){
			addState = false;
			scope.lisType = aSelect[numIndex].type;
			scope.lisTalent = aSelect[numIndex].talent;
			scope.lisLevel = aSelect[numIndex].level;
			scope.vm.lisName = aSelect[numIndex].name;
			scope.vm.lisQQ = parseInt(aSelect[numIndex].qq);
			scope.vm.lisSchool = aSelect[numIndex].school;
			//scope.vm.lisTime = aSelect[numIndex].joinTime;
			scope.vm.lisText = aSelect[numIndex].wish;
			ue.addListener("ready", function () {
				ue.setContent(scope.vm.lisText);
			});
			submitState = false;
		}else{
			scope.lisType = 1;
			scope.lisTalent = 1;
			scope.lisLevel = 1;
			scope.vm.lisName = '';
			scope.vm.lisQQ = '';
			scope.vm.lisSchool = '';
			//scope.vm.lisTime = '';
			scope.vm.lisText = '';
			console.log('ok');
			submitState = true;
		}
}})



.module("app").directive("directiveName",function(){
	return{
		//通过设置项来定义
	};
})
元素名、属性、class、注释

restrict:
	E(元素),A(属性),C(类),M(注释)

priority:
	(数字)，可选参数，指明指令的优先级，若在单个DOM上有多个指令，则优先级高的先执行；
	
terminal:
	（布尔型），可选参数，可以被设置为true或false，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用(优先级相同的还是会执行)

template（字符串或者函数）可选参数，可以是：
	HTML文本
		template: '<div><h1>Hi 我是林炳文~~~</h1></div>'
	函数(可接受两个参数tElement和tAttrs)
		其中tElement是指使用此指令的元素，而tAttrs则实例的属性，它是一个由元素上所有的属性组成的集合（对象）形如：
		<hello-world2 title = '我是第二个directive'></hello-world2>  
		其中title就是tattrs上的属性
		template: function(tElement,tAttrs){  var _html = '';  _html += '<div>' +'hello '+tAttrs.title+'</div>';  return _html;  } 

templateUrl

replace:
	（布尔值），默认值为false，设置为true时候，hello-world这个标签不在了
	
scope:
	默认值false。表示继承父作用域;
	true。表示继承父作用域，并创建自己的作用域（子作用域）;
	{}。表示创建一个全新的隔离作用域；



.directive('hello', function() {  return {   restrict: 'EA',   transclude: true, //注意此处必须设置为true   

controller:   function ($scope, $element,$attrs,$transclude,$log) { //在这里你可以注入你想注入的服务   $transclude(function (clone) {    var a = angular.element('<p>');    a.css('color', $attrs.mycolor);    a.text(clone.text());    $element.append(a);   });   $log.info("hello everyone");   }  };  }); 






























